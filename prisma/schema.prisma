// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* -------------------- App models -------------------- */

model User {
  id         String   @id @default(uuid()) @db.Uuid
  email      String   @unique
  password   String?
  name       String?
  role       String   @default("USER")
  createdAt  DateTime @default(now())

  // Relations
  accounts     Account[]
  sessions     Session[]
  enrollments  Enrollment[]
  progresses   Progress[]
}

model Course {
  id          String   @id @default(uuid()) @db.Uuid
  slug        String   @unique
  title       String
  summary     String?
  thumbnail   String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations (opposites added to fix your error)
  sessions        CourseSession[]
  enrollments     Enrollment[]
  progresses      Progress[]        // <— opposite side of Progress.course
  accessRequests  AccessRequest[]   // <— opposite side of AccessRequest.course
}

model CourseSession {
  id       String @id @default(uuid()) @db.Uuid
  courseId String @db.Uuid
  index    Int
  title    String
  content  String?

  course   Course @relation(fields: [courseId], references: [id])

  @@unique([courseId, index])
}

model Enrollment {
  id       String @id @default(uuid()) @db.Uuid
  userId   String @db.Uuid
  courseId String @db.Uuid
  status   String @default("ACTIVE")

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Progress {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  courseId   String   @db.Uuid
  weekNumber Int
  data       Json?
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, weekNumber])
}

model AccessRequest {
  id        String   @id @default(uuid()) @db.Uuid
  courseId  String   @db.Uuid
  name      String
  email     String
  message   String?
  status    String   @default("PENDING")
  createdAt DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id])
}

/* -------------------- Auth.js adapter models -------------------- */

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
