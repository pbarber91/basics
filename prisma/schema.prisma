// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Supabase Postgres URL
}

enum Role {
  USER
  LEADER
  ADMIN
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
}

enum AccessRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

/* ---------- Auth.js (Prisma Adapter) standard models ---------- */

model User {
  id             String    @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           Role      @default(USER)

  accounts       Account[]
  sessions       Session[]

  // App relations
  progresses     Progress[]
  enrollments    Enrollment[]
  accessRequests AccessRequest[]   // ‚Üê now has an opposite on AccessRequest

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Account {
  id                String  @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ---------------------- App models ---------------------- */

model Course {
  id             String           @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  title          String
  slug           String           @unique
  summary        String?
  thumbnail      String?
  isPublished    Boolean          @default(false)

  // Relations
  sessions       CourseSession[]
  enrollments    Enrollment[]
  accessRequests AccessRequest[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model CourseSession {
  id             String    @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  courseId       String    @db.Uuid
  index          Int
  title          String
  videoUrl       String?
  captionsVttUrl String?
  transcript     String?

  course         Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progresses     Progress[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([courseId, index])
}

model Enrollment {
  id        String           @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  userId    String           @db.Uuid
  courseId  String           @db.Uuid
  status    EnrollmentStatus @default(ACTIVE)

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([userId, courseId])
}

model Progress {
  id               String         @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  userId           String         @db.Uuid
  courseSessionId  String         @db.Uuid

  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseSession    CourseSession  @relation(fields: [courseSessionId], references: [id], onDelete: Cascade)

  createdAt        DateTime       @default(now())

  @@unique([userId, courseSessionId])
}

model AccessRequest {
  id        String               @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  courseId  String               @db.Uuid
  // Optional: request can be tied to a user if they already exist; otherwise null
  userId    String?              @db.Uuid
  name      String
  email     String
  message   String?
  status    AccessRequestStatus  @default(PENDING)
  createdAt DateTime             @default(now())

  course    Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User?                @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([courseId])
  @@index([userId])
}
