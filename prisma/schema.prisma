// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ----------------------- MODELS (match your SQL) ----------------------- */

model User {
  id        String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name      String?
  email     String   @unique
  password  String
  role      String   @default("USER")
  createdAt DateTime @db.Timestamptz(6) @default(dbgenerated("now()"))
  updatedAt DateTime @db.Timestamptz(6) @default(dbgenerated("now()"))

  accounts     Account[]
  sessionsAuth SessionAuth[]
  enrollments  Enrollment[]
  progress     Progress[]

  @@map("User")
}

model Account {
  id                String  @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "account_provider_providerAccountId_idx")
  @@map("Account")
}

model SessionAuth {
  id           String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("SessionAuth")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz(6)

  @@id([identifier, token])
  @@map("VerificationToken")
}

model Course {
  id          String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  slug        String   @unique
  title       String
  summary     String?
  thumbnail   String?
  isPublished Boolean  @default(false) @map("isPublished")
  createdAt   DateTime @db.Timestamptz(6) @default(dbgenerated("now()"))
  updatedAt   DateTime @db.Timestamptz(6) @default(dbgenerated("now()"))

  sessions    Session[]
  enrollments Enrollment[]
  requests    AccessRequest[]

  @@map("Course")
}

model Session {
  id             String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  courseId       String   @db.Uuid
  index          Int
  title          String
  summary        String?
  videoUrl       String?
  captionsVttUrl String?
  transcript     String?
  guideOnlineUrl String?
  guidePdfUrl    String?
  thumbnail      String?
  createdAt      DateTime @db.Timestamptz(6) @default(dbgenerated("now()"))
  updatedAt      DateTime @db.Timestamptz(6) @default(dbgenerated("now()"))

  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@unique([courseId, index])
  @@map("Session")
}

model Enrollment {
  id        String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  userId    String   @db.Uuid
  courseId  String   @db.Uuid
  status    String   @default("ACTIVE")
  createdAt DateTime @db.Timestamptz(6) @default(dbgenerated("now()"))

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("Enrollment")
}

model Progress {
  id        String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  userId    String   @db.Uuid
  sessionId String   @db.Uuid
  createdAt DateTime @db.Timestamptz(6) @default(dbgenerated("now()"))

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionId])
  @@map("Progress")
}

model AccessRequest {
  id        String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  courseId  String   @db.Uuid
  name      String?
  email     String
  message   String?
  status    String   @default("PENDING")
  createdAt DateTime @db.Timestamptz(6) @default(dbgenerated("now()"))

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId], map: "accessrequest_course_idx")
  @@index([status], map: "accessrequest_status_idx")
  @@map("AccessRequest")
}
